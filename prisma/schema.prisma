generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String         @id @unique @default(uuid())
  email               String         @unique
  password            String
  role                String         @default("Admin")
  schoolId            Int            @unique @default(autoincrement())
  schoolName          String?
  contactNumber       String?
  schoolAddress       String?
  district            String?
  tehsil              String?
  fax                 String?
  bankTitle           String?
  p_fName             String?
  p_mName             String?
  p_lName             String?
  p_contact           String?
  p_phone             String?
  p_email             String?
  c_fName             String?
  c_mName             String?
  c_lName             String?
  c_contact           String?
  c_phone             String?
  c_email             String?
  c_accountDetails    String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  p_Name              String?        @db.VarChar(255)
  c_Name              String?        @db.VarChar(255)
  city                String?        @db.VarChar(255)
  districtCode        String?        @db.VarChar(255)
  districtName        String?        @db.VarChar(250)
  passwordResetTokens Reset[]
  registrations       Registration[]

  @@map("User")
}

model UserNew {
  id                  String            @id @unique @default(uuid())
  email               String            @unique
  password            String
  role                String            @default("Admin")
  schoolId            Int               @unique @default(autoincrement())
  schoolName          String?
  contactNumber       String?
  schoolAddress       String?
  district            String?
  districtCode        String?           @db.VarChar(255)
  districtName        String?           @db.VarChar(250)
  tehsil              String?
  fax                 String?
  bankTitle           String?
  p_fName             String?
  p_mName             String?
  p_lName             String?
  p_contact           String?
  p_phone             String?
  p_email             String?
  c_fName             String?
  c_mName             String?
  c_lName             String?
  c_contact           String?
  c_phone             String?
  c_email             String?
  c_accountDetails    String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  c_Name              String?           @db.VarChar(255)
  city                String?           @db.VarChar(255)
  p_Name              String?           @db.VarChar(255)
  passwordResetTokens ResetNew[]
  registrations       RegistrationNew[]

  @@map("user_new")
}

model Reset {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("Reset")
}

model ResetNew {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  userId    String
  user      UserNew   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("reset_new")
}

model Registration {
  id           String         @id @default(uuid())
  contestId    String
  schoolId     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  registeredBy String
  schoolName   String?
  students     Student[]
  paymentProof PaymentProof[]
  user         User           @relation(fields: [registeredBy], references: [id], onDelete: Cascade)

  @@unique([contestId, schoolId])
  @@index([contestId])
  @@index([registeredBy])
  @@index([schoolId])
  @@map("Registration")
}

model RegistrationNew {
  id           String            @id @default(uuid())
  contestId    String
  schoolId     Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  registeredBy String
  schoolName   String?
  students     StudentNew[]
  paymentProof PaymentProofNew[]
  user         UserNew           @relation(fields: [registeredBy], references: [id], onDelete: Cascade)

  @@unique([contestId, schoolId])
  @@index([contestId])
  @@index([registeredBy])
  @@index([schoolId])
  @@map("registration_new")
}

model ContestType {
  id          String    @id @default(uuid())
  contestName String    @unique
  imageUrl    String    @db.VarChar(10000)
  contestCh   String
  contests    Contest[]

  @@map("ContestType")
}

model ContestTypeNew {
  id          String       @id @default(uuid())
  contestName String       @unique
  imageUrl    String       @db.VarChar(10000)
  contestCh   String
  contests    ContestNew[]

  @@map("contesttype_new")
}

model Contest {
  id            String      @id @default(uuid())
  name          String
  startDate     DateTime
  endDate       DateTime
  contestDate   String?
  resultDate    String?
  contestCh     String?
  contestTypeId String
  contestType   ContestType @relation(fields: [contestTypeId], references: [id], onDelete: Cascade)

  @@index([contestTypeId])
  @@map("Contest")
}

model ContestNew {
  id             String          @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  contestDate    String?
  resultDate     String?
  contestCh      String?
  contestTypeId  String
  contestType    ContestTypeNew  @relation(fields: [contestTypeId], references: [id], onDelete: Cascade)
  sheetScans     SheetScan[]
  scores         Score[]
  correctAnswers CorrectAnswer[]

  @@index([contestTypeId])
  @@map("contest_new")
}

model Student {
  id             Int          @id @default(autoincrement())
  registrationId String
  rollNumber     String
  studentName    String
  fatherName     String
  class          String
  level          String
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
  @@map("Student")
}

model StudentNew {
  id             Int             @id @default(autoincrement())
  registrationId String
  rollNumber     String
  studentName    String
  fatherName     String
  class          String
  level          String
  registration   RegistrationNew @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
  @@map("student_new")
}

model PaymentProof {
  id             Int          @id @default(autoincrement())
  imageUrl       String
  registrationId String
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
  @@map("PaymentProof")
}

model PaymentProofNew {
  id             Int             @id @default(autoincrement())
  imageUrl       String
  registrationId String
  registration   RegistrationNew @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId])
  @@map("paymentproof_new")
}

model Notification {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now())

  @@map("Notification")
}

model CorrectAnswer {
  id        BigInt     @id @default(autoincrement()) @map("ID")
  updatedAt DateTime   @updatedAt @map("UPDATED_ON")
  answers   String?    @map("ANSWERS") @db.VarChar(1500)
  classId   Int?       @map("CLASS_ID")
  contestId String     @default("defaultContestId") @map("CONTEST_ID") @db.VarChar(255)
  contest   ContestNew @relation(fields: [contestId], references: [id])

  @@map("u_correct_answers")
}

model Login {
  id        BigInt   @id @default(autoincrement()) @map("ID")
  updatedAt DateTime @updatedAt @map("UPDATED_ON")
  email     String?  @map("EMAIL") @db.VarChar(255)
  name      String?  @map("NAME") @db.VarChar(255)
  password  String?  @map("PASSWORD") @db.VarChar(255)
  status    String?  @map("STATUS") @db.VarChar(255)
  username  String?  @map("USERNAME") @db.VarChar(255)

  @@map("u_logins")
}

model Position {
  id           BigInt   @id @default(autoincrement()) @map("ID")
  updatedAt    DateTime @updatedAt @map("UPDATED_ON")
  class        String?  @map("CLASS") @db.VarChar(255)
  district     String?  @map("DISTRICT") @db.VarChar(255)
  noOfStudents Int?     @map("NO_OF_STUDENTS")
  position     Int?     @map("POSITION")
  schoolId     Int?     @map("school_Id")
  score        Decimal? @map("SCORE") @db.Decimal(19, 2)
  type         String?  @map("TYPE") @db.VarChar(255)

  @@map("u_positions")
}

model Score {
  id          BigInt     @id @default(autoincrement()) @map("ID")
  updatedAt   DateTime   @updatedAt @map("UPDATED_ON")
  cRow1       Int?       @map("C_ROW1")
  cRow2       Int?       @map("C_ROW2")
  cRow3       Int?       @map("C_ROW3")
  cTotal      Int?       @map("C_TOTAL")
  contestId   String     @map("CONTEST_ID") @db.VarChar(500)
  creditScore Int?       @map("CREDIT_SCORE")
  description String?    @map("DESCRIPTION") @db.VarChar(1000)
  missing     Int?       @map("MISSING")
  percentage  Decimal?   @map("PERCENTAGE") @db.Decimal(19, 2)
  rollNo      String?    @map("ROLL_NO") @db.VarChar(255)
  score       BigInt?    @map("SCORE")
  totalMarks  BigInt?    @map("TOTAL_MARKS")
  wrong       Int?       @map("WRONG")
  contest     ContestNew @relation(fields: [contestId], references: [id])

  @@map("u_scores")
}

model SheetScan {
  id        BigInt     @id @default(autoincrement()) @map("ID")
  updatedAt DateTime   @updatedAt @map("UPDATED_ON")
  answers   String?    @map("ANSWERS") @db.VarChar(1500)
  fileName  String?    @map("FILE_NAME") @db.VarChar(255)
  keyLogs   String?    @map("KEY_LOGS") @db.VarChar(1500)
  reason    String?    @map("REASON") @db.VarChar(1500)
  rollNo    String?    @map("ROLL_NO") @db.VarChar(255)
  status    String?    @map("STATUS") @db.VarChar(255)
  contestId String     @map("CONTEST_ID") @db.VarChar(255)
  contest   ContestNew @relation(fields: [contestId], references: [id])

  @@map("u_sheet_scans")
}


model Updates {
  id         BigInt      @id @default(autoincrement())
  type       String      @default("Add")
  schoolId   Int
  schoolName String
  email      String
  students   Json
}